//матрица по методу гауса 4 на 3

#include <iostream>
using namespace std;

int determinant(int matrix[4][3]);						//4 - для четырёх уравнений
int determinantX1(int coefMatrix[3][3], int constTermsMatrix[3]);		//3*3 - для а, 3*1 - для b
int determinantX2(int coefMatrix[3][3], int constTermsMatrix[3]);
int determinantX3(int coefMatrix[3][3], int constTermsMatrix[3]);
int determinantX4(int coefMatrix[3][3], int constTermsMatrix[3]);

int main()
{
	int i, j;
	
	int coefficientsMatrix3x3[4][3];
	int constantTermsMatrix3x1[3];

	cout << "Vvedite koefficienty i svobodnye chleny " << endl;
	for (i = 0; i < 4; i++)						//заполнить 4 массива
	{
		for (j = 0; j < 3; j++)					//в каждом массиве по 3 строки
		{
			cout << "a[ " << i << "," << j << "]= ";
			cin >> coefficientsMatrix3x3[i][j];
		}
		cout << "b,[ " << i << "]= ";
		cin >> constantTermsMatrix3x1[i];
	}
    
	int det = determinant(coefficientsMatrix3x3);
	int detX1 = determinantX1(coefficientsMatrix3x3, constantTermsMatrix3x1);
	int detX2 = determinantX2(coefficientsMatrix3x3, constantTermsMatrix3x1);
	int detX3 = determinantX3(coefficientsMatrix3x3, constantTermsMatrix3x1);
	int detX4 = determinantX3(coefficientsMatrix3x3, constantTermsMatrix3x1);

	if (det != 0)							//если матрица заполнена с ошибками
	{
		cout << "X1 = " << (float)detX1/(float)det << endl;
		cout << "X2 = " << (float)detX2/(float)det << endl;
		cout << "X3 = " << (float)detX3/(float)det << endl;
		cout << "X4 = " << (float)detX4/(float)det << endl;
	}
	else								//если без ошибок
		cout << "Sistema ne imejet reshenij " << endl << endl;

	return 0;
}

int determinant(int matrix[3][3])					//вручную заполнить каждую ячейку массива
{
	int a11 = matrix[0][0];
	int a12 = matrix[0][1];
	int a13 = matrix[0][2];
	int a21 = matrix[1][0];
	int a22 = matrix[1][1];
	int a23 = matrix[1][2];
	int a31 = matrix[2][0];
	int a32 = matrix[2][1];
	int a33 = matrix[2][2];

	return (a11 * a22 * a33) + (a12 * a23 * a31) + (a13 * a21 * a32) -
		(a13 * a22 * a31) - (a11 * a23 * a32) - (a12 * a21 * a33);		//метематические формулы
}

int determinantX1(int coefMatrix[3][3], int constTermsMatrix[3])
{
	int a12 = coefMatrix[0][1];
	int a13 = coefMatrix[0][2];
	int a22 = coefMatrix[1][1];
	int a23 = coefMatrix[1][2];
	int a32 = coefMatrix[2][1];
	int a33 = coefMatrix[2][2];
	int c1 = constTermsMatrix[0];
	int c2 = constTermsMatrix[1];
	int c3 = constTermsMatrix[2];

	return (c1 * a22 * a33) + (a12 * a23 * c3) + (a13 * c2 * a32) -
		(a13 * a22 * c3) - (c1 * a23 * a32) - (a12 * c2 * a33);
}

int determinantX2(int coefMatrix[3][3], int constTermsMatrix[3])
{
	int a11 = coefMatrix[0][0];
	int a13 = coefMatrix[0][2];
	int a21 = coefMatrix[1][0];
	int a23 = coefMatrix[1][2];
	int a31 = coefMatrix[2][0];
	int a33 = coefMatrix[2][2];
	int c1 = constTermsMatrix[0];
	int c2 = constTermsMatrix[1];
	int c3 = constTermsMatrix[2];

	return (a11 * c2 * a33) + (c1 * a23 * a31) + (a13 * a21 * c3) -
		(a13 * c2 * a31) - (a11 * a23 * c3) - (c1 * a21 * a33);
}

int determinantX3(int coefMatrix[3][3], int constTermsMatrix[3])
{
	int a11 = coefMatrix[0][0];
	int a12 = coefMatrix[0][1];
	int a21 = coefMatrix[1][0];
	int a22 = coefMatrix[1][1];
	int a31 = coefMatrix[2][0];
	int a32 = coefMatrix[2][1];
	int c1 = constTermsMatrix[0];
	int c2 = constTermsMatrix[1];
	int c3 = constTermsMatrix[2];

	return (a11 * a22 * c3) + (a12 * c2 * a31) + (c1 * a21 * a32) -
		(c1 * a22 * a31) - (a11 * c2 * a32) - (a12 * a21 * c3);
}

int determinantX4(int coefMatrix[3][3], int constTermsMatrix[3])
{
	int a11 = coefMatrix[0][0];
	int a12 = coefMatrix[0][1];
	int a21 = coefMatrix[1][0];
	int a22 = coefMatrix[1][1];
	int a31 = coefMatrix[2][0];
	int a32 = coefMatrix[2][1];
	int c1 = constTermsMatrix[0];
	int c2 = constTermsMatrix[1];
	int c3 = constTermsMatrix[2];

	return (a11 * a22 * c3) + (a12 * c2 * a31) + (c1 * a21 * a32) -
		(c1 * a22 * a31) - (a11 * c2 * a32) - (a12 * a21 * c3);
}
